<?php
namespace Dfe\AllPay\Source;
use Dfe\AllPay\Settings as S;
use Magento\Sales\Model\Order as O;
/**
 * 2016-07-17
 * Эта опция задаёт способ идентификации платежа.
 * Наиболее очевидным и удобным способом является использование идентификатора заказа.
 * Однако allPay допускает в идентификаторе платежа (параметре «MerchantTradeNo»)
 * только цифры и латинские буквы:
 * «Merchant trade number».
 * Varchar(20)
 * «Merchant trade number could not be repeated.
 * It is composed with upper and lower cases of English letter and numbers.»
 *
 * В принципе, стандартные номера заказов удовлетворяют этим условиям,
 * но вот нестандартные, вида ORD-2016/07-00274
 * (которые делает наш модуль Sales Documents Numberation) — не удовлетворяют.
 *
 * Поэтому если магазин использует нестандартные номера заказов,
 * то ему для идентификации платежей надо использовать не номера заказов,
 * а автосоздаваемые идентификаторы платежей.
 *
 * @method static PaymentIdentificationType s()
 */
class PaymentIdentificationType extends \Df\Config\SourceT {
	/**
	 * 2016-07-17
	 * @override
	 * @see \Df\Config\Source::map()
	 * @used-by \Df\Config\Source::toOptionArray()
	 * @return array(string => string)
	 */
	protected function map() {
		return [
			self::$ORDER_INCREMENT_ID => 'Order Increment ID'
			,self::$AUTOGENERATED_RANDOM_ID => 'Autogenerated Random ID'
		];
	}

	/** @var string */
	private static $AUTOGENERATED_RANDOM_ID = 'autogenerated_random_id';
	/** @var string */
	private static $ORDER_INCREMENT_ID = 'order_increment_id';

	/**
	 * 2016-07-17
	 * @param O $order
	 * @return string
	 */
	public static function id(O $order) {
		return
			self::$ORDER_INCREMENT_ID === S::s()->paymentIdentificationType()
			? $order->getIncrementId()
			: df_uid(10)
		;
	}
}